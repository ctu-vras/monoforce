#!/usr/bin/env python

import torch
import numpy as np
from monoforce.config import DPhysConfig
from monoforce.models.dphysics import DPhysics
from monoforce.vis import setup_visualization, animate_trajectory


# rigid body and terrain parameters
dphys_cfg = DPhysConfig()
dphys_cfg.grid_res = 0.1
dphys_cfg.d_max = 6.4
dphys_cfg.d_min = 1.
dphys_cfg.traj_sim_time = 5.0
dphys_cfg.dt = 0.01
device = torch.device('cpu')


def motion():
    from scipy.spatial.transform import Rotation
    import matplotlib.pyplot as plt
    import matplotlib
    matplotlib.use('Qt5Agg')

    # simulation parameters
    dt = dphys_cfg.dt
    dphys_cfg.traj_sim_time = 5.0
    dphys_cfg.k_friction = 1.0
    T = dphys_cfg.traj_sim_time

    # control inputs: [vel_left, vel_right] in m/s
    controls = torch.stack([
        torch.tensor([[0.5, 0.6]] * int(T / dt)),
        # torch.tensor([[-0.4, -0.6]] * int(T / dt))
    ]).to(device)
    B, N_ts = controls.shape[:2]
    assert controls.shape == (B, N_ts, 2)

    # initial state
    x = torch.stack([
        torch.tensor([0.0, 0.0, 0.2]),
        # torch.tensor([-2.0, 0.0, 0.2])
    ]).to(device)
    assert x.shape == (B, 3)
    xd = torch.zeros_like(x)
    assert xd.shape == (B, 3)
    R = torch.tensor(Rotation.from_euler('z', [0.0]).as_matrix(), dtype=torch.float32, device=device)
    # R = torch.tensor(Rotation.from_euler('z', [0.0, np.pi/4]).as_matrix(), dtype=torch.float32, device=device)
    assert R.shape == (B, 3, 3)
    omega = torch.zeros_like(x)
    assert omega.shape == (B, 3)
    x_points = torch.as_tensor(dphys_cfg.robot_points, device=device).repeat(x.shape[0], 1, 1)
    assert x_points.shape == (B, len(dphys_cfg.robot_points), 3)
    x_points = x_points @ R.transpose(1, 2) + x.unsqueeze(1)
    assert x_points.shape == (B, len(dphys_cfg.robot_points), 3)
    state0 = (x, xd, R, omega, x_points)

    # heightmap defining the terrain
    x_grid = torch.arange(-dphys_cfg.d_max, dphys_cfg.d_max, dphys_cfg.grid_res)
    y_grid = torch.arange(-dphys_cfg.d_max, dphys_cfg.d_max, dphys_cfg.grid_res)
    x_grid, y_grid = torch.meshgrid(x_grid, y_grid)
    # z_grid = (torch.sin(x_grid) * torch.cos(y_grid)).to(device)
    z_grid = torch.exp(-(x_grid - 2) ** 2 / 4) * torch.exp(-(y_grid - 0) ** 2 / 2).to(device)
    # z_grid = torch.zeros_like(x_grid)
    stiffness = dphys_cfg.k_stiffness * torch.ones_like(z_grid)
    friction = dphys_cfg.k_friction * torch.ones_like(z_grid)
    x_grid, y_grid, z_grid = x_grid.to(device), y_grid.to(device), z_grid.to(device)
    # repeat the heightmap for each rigid body
    x_grid = x_grid.repeat(x.shape[0], 1, 1)
    y_grid = y_grid.repeat(x.shape[0], 1, 1)
    z_grid = z_grid.repeat(x.shape[0], 1, 1)
    stiffness = stiffness.repeat(x.shape[0], 1, 1)
    friction = friction.repeat(x.shape[0], 1, 1)
    H, W = int(2 * dphys_cfg.d_max / dphys_cfg.grid_res), int(2 * dphys_cfg.d_max / dphys_cfg.grid_res)
    assert x_grid.shape == (B, H, W)
    assert y_grid.shape == (B, H, W)
    assert z_grid.shape == (B, H, W)
    assert stiffness.shape == (B, H, W)
    assert friction.shape == (B, H, W)

    # simulate the rigid body dynamics
    dphysics = DPhysics(dphys_cfg, device=device)
    states, forces = dphysics(z_grid=z_grid, controls=controls, state=state0,
                              stiffness=stiffness, friction=friction)

    # visualize using mayavi
    for b in range(len(states[0])):
        # plot velocity profile
        Xs, Xds, Rs, Omegas, X_points = states
        tt = torch.arange(0, T, dt)
        Xs_np, Xds_np, Rs_np, Omegas_np = [s.detach().cpu().numpy() for s in [Xs, Xds, Rs, Omegas]]
        tt_np = tt.detach().cpu().numpy()
        fig, axs = plt.subplots(2, 1, figsize=(10, 10))
        axs[0].plot(tt_np, Xs_np[b, :, 0], label='X', color='r')
        axs[0].plot(tt_np, Xs_np[b, :, 1], label='Y', color='g')
        # axs[0].plot(tt_np, Xs_np[b, :, 2], label='Z', color='b')
        axs[0].set_title('Position')
        axs[0].legend()
        axs[1].plot(tt_np, Xds_np[b, :, 0], label='Vx', color='r')
        axs[1].plot(tt_np, Xds_np[b, :, 1], label='Vy', color='g')
        # axs[1].plot(tt_np, Xds_np[b, :, 2], label='Vz', color='b')
        axs[1].set_title('Velocity')
        axs[1].legend()
        plt.show()
        # return

        # get the states and forces for the b-th rigid body and move them to the cpu
        xs, R, xds, omegas, x_points = [s[b].detach().cpu().numpy() for s in states]
        F_spring, F_friction = [f[b].detach().cpu().numpy() for f in forces]
        x_grid_np, y_grid_np, z_grid_np = [g[b].detach().cpu().numpy() for g in [x_grid, y_grid, z_grid]]
        mask_left_np = dphysics.robot_mask_left.detach().cpu().numpy()
        mask_right_np = dphysics.robot_mask_right.detach().cpu().numpy()

        # set up the visualization
        vis_cfg = setup_visualization(states=(xs, R, xds, omegas, x_points),
                                      forces=(F_spring, F_friction),
                                      x_grid=x_grid_np, y_grid=y_grid_np, z_grid=z_grid_np,
                                      mask_left=mask_left_np, mask_right=mask_right_np)

        # visualize animated trajectory
        animate_trajectory(states=(xs, R, xds, omegas, x_points),
                           forces=(F_spring, F_friction),
                           z_grid=z_grid_np,
                           vis_cfg=vis_cfg, step=10)


def shoot_multiple():
    from time import time
    from scipy.spatial.transform import Rotation
    from monoforce.models.dphysics import vw_to_track_vel
    from monoforce.vis import set_axes_equal
    import matplotlib.pyplot as plt
    import matplotlib
    matplotlib.use('Qt5Agg')

    # simulation parameters
    dphys_cfg = DPhysConfig()
    dt = dphys_cfg.dt
    T = dphys_cfg.traj_sim_time
    num_trajs = dphys_cfg.n_sim_trajs
    vel_max, omega_max = dphys_cfg.vel_max, dphys_cfg.omega_max

    # rigid body parameters
    x_points = torch.as_tensor(dphys_cfg.robot_points, device=device)

    # initial state
    x = torch.tensor([[0.0, 0.0, 0.2]], device=device).repeat(num_trajs, 1)
    xd = torch.zeros_like(x)
    R = torch.eye(3, device=device).repeat(x.shape[0], 1, 1)
    # R = torch.tensor(Rotation.from_euler('z', np.pi/6).as_matrix(), dtype=torch.float32, device=device).repeat(num_trajs, 1, 1)
    omega = torch.zeros_like(x)
    x_points = x_points @ R.transpose(1, 2) + x.unsqueeze(1)

    # terrain properties
    x_grid = torch.arange(-dphys_cfg.d_max, dphys_cfg.d_max, dphys_cfg.grid_res).to(device)
    y_grid = torch.arange(-dphys_cfg.d_max, dphys_cfg.d_max, dphys_cfg.grid_res).to(device)
    x_grid, y_grid = torch.meshgrid(x_grid, y_grid)
    z_grid = torch.exp(-(x_grid - 2) ** 2 / 4) * torch.exp(-(y_grid - 0) ** 2 / 2).to(device)
    # z_grid = (torch.sin(x_grid) * torch.cos(y_grid)).to(device)
    # z_grid = torch.zeros_like(x_grid)

    stiffness = dphys_cfg.k_stiffness * torch.ones_like(z_grid)
    friction = dphys_cfg.k_friction * torch.ones_like(z_grid)
    # repeat the heightmap for each rigid body
    x_grid = x_grid.repeat(x.shape[0], 1, 1)
    y_grid = y_grid.repeat(x.shape[0], 1, 1)
    z_grid = z_grid.repeat(x.shape[0], 1, 1)
    stiffness = stiffness.repeat(x.shape[0], 1, 1)
    friction = friction.repeat(x.shape[0], 1, 1)

    # control inputs in m/s and rad/s
    assert num_trajs % 2 == 0, 'num_trajs must be even'
    vels_x = torch.cat([-vel_max * torch.ones((num_trajs // 2, int(T / dt))),
                        vel_max * torch.ones((num_trajs // 2, int(T / dt)))])
    omegas_z = torch.cat([torch.linspace(-omega_max, omega_max, num_trajs // 2),
                          torch.linspace(-omega_max, omega_max, num_trajs // 2)])
    assert vels_x.shape == (num_trajs, int(T / dt))
    assert omegas_z.shape == (num_trajs,)
    vels = torch.zeros((num_trajs, int(T / dt), 3))
    vels[:, :, 0] = vels_x
    omegas = torch.zeros((num_trajs, 3))
    omegas[:, 2] = omegas_z

    controls = torch.zeros((num_trajs, int(T / dt), 2))
    for i in range(num_trajs):
        controls[i, :, 0], controls[i, :, 1] = vw_to_track_vel(vels[i, :, 0], omegas[i, 2])
    controls = torch.as_tensor(controls, dtype=torch.float32, device=device)

    # initial state
    state0 = (x, xd, R, omega, x_points)

    # put tensors to device
    state0 = tuple([s.to(device) for s in state0])
    z_grid = z_grid.to(device)
    controls = controls.to(device)

    # create the dphysics model
    dphysics = DPhysics(dphys_cfg, device=device)

    # simulate the rigid body dynamics
    with torch.no_grad():
        t0 = time()
        states, forces = dphysics(z_grid=z_grid, controls=controls, state=state0)
        t1 = time()
        Xs, Xds, Rs, Omegas, X_points = states
        print(Xs.shape)
        print(f'Simulation took {(t1-t0):.3f} [sec] on device: {device}')

    # visualize
    with torch.no_grad():
        fig = plt.figure(figsize=(10, 10))
        ax = fig.add_subplot(111, projection='3d')
        # plot heightmap
        ax.plot_surface(x_grid[0].cpu().numpy(), y_grid[0].cpu().numpy(), z_grid[0].cpu().numpy(), alpha=0.6, cmap='terrain')
        set_axes_equal(ax)
        for i in range(num_trajs):
            ax.plot(Xs[i, :, 0].cpu(), Xs[i, :, 1].cpu(), Xs[i, :, 2].cpu(), c='b')
        ax.set_title(f'Simulation of {num_trajs} trajs (T={T} [sec] long) took {(t1-t0):.3f} [sec] on device: {device}')
        ax.set_xlabel('X [m]')
        ax.set_ylabel('Y [m]')
        ax.set_zlabel('Z [m]')
        plt.show()


def main():
    motion()
    # shoot_multiple()


if __name__ == '__main__':
    main()
